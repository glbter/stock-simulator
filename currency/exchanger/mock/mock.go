// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/glbter/currency-ex/currency/exchanger (interfaces: CurrencyRater,AllCurrencyRater)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	exchanger "github.com/glbter/currency-ex/currency/exchanger"
	gomock "github.com/golang/mock/gomock"
)

// MockCurrencyRater is a mock of CurrencyRater interface.
type MockCurrencyRater struct {
	ctrl     *gomock.Controller
	recorder *MockCurrencyRaterMockRecorder
}

// MockCurrencyRaterMockRecorder is the mock recorder for MockCurrencyRater.
type MockCurrencyRaterMockRecorder struct {
	mock *MockCurrencyRater
}

// NewMockCurrencyRater creates a new mock instance.
func NewMockCurrencyRater(ctrl *gomock.Controller) *MockCurrencyRater {
	mock := &MockCurrencyRater{ctrl: ctrl}
	mock.recorder = &MockCurrencyRaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCurrencyRater) EXPECT() *MockCurrencyRaterMockRecorder {
	return m.recorder
}

// FindRate mocks base method.
func (m *MockCurrencyRater) FindRate(arg0 exchanger.Currency, arg1 time.Time) (exchanger.CurrencyRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRate", arg0, arg1)
	ret0, _ := ret[0].(exchanger.CurrencyRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRate indicates an expected call of FindRate.
func (mr *MockCurrencyRaterMockRecorder) FindRate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRate", reflect.TypeOf((*MockCurrencyRater)(nil).FindRate), arg0, arg1)
}

// MockAllCurrencyRater is a mock of AllCurrencyRater interface.
type MockAllCurrencyRater struct {
	ctrl     *gomock.Controller
	recorder *MockAllCurrencyRaterMockRecorder
}

// MockAllCurrencyRaterMockRecorder is the mock recorder for MockAllCurrencyRater.
type MockAllCurrencyRaterMockRecorder struct {
	mock *MockAllCurrencyRater
}

// NewMockAllCurrencyRater creates a new mock instance.
func NewMockAllCurrencyRater(ctrl *gomock.Controller) *MockAllCurrencyRater {
	mock := &MockAllCurrencyRater{ctrl: ctrl}
	mock.recorder = &MockAllCurrencyRaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAllCurrencyRater) EXPECT() *MockAllCurrencyRaterMockRecorder {
	return m.recorder
}

// FindRates mocks base method.
func (m *MockAllCurrencyRater) FindRates(arg0 context.Context, arg1 exchanger.ConvertCurrencyParams) ([]exchanger.CurrencyRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRates", arg0, arg1)
	ret0, _ := ret[0].([]exchanger.CurrencyRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRates indicates an expected call of FindRates.
func (mr *MockAllCurrencyRaterMockRecorder) FindRates(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRates", reflect.TypeOf((*MockAllCurrencyRater)(nil).FindRates), arg0, arg1)
}
