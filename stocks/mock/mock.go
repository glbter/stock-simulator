// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/glbter/currency-ex/stocks (interfaces: PortfolioRepository,TickerRepository)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	sql "github.com/glbter/currency-ex/pkg/sql"
	stocks "github.com/glbter/currency-ex/stocks"
	gomock "github.com/golang/mock/gomock"
)

// MockPortfolioRepository is a mock of PortfolioRepository interface.
type MockPortfolioRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPortfolioRepositoryMockRecorder
}

// MockPortfolioRepositoryMockRecorder is the mock recorder for MockPortfolioRepository.
type MockPortfolioRepositoryMockRecorder struct {
	mock *MockPortfolioRepository
}

// NewMockPortfolioRepository creates a new mock instance.
func NewMockPortfolioRepository(ctrl *gomock.Controller) *MockPortfolioRepository {
	mock := &MockPortfolioRepository{ctrl: ctrl}
	mock.recorder = &MockPortfolioRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortfolioRepository) EXPECT() *MockPortfolioRepositoryMockRecorder {
	return m.recorder
}

// CountPortfolio mocks base method.
func (m *MockPortfolioRepository) CountPortfolio(arg0 context.Context, arg1 sql.Selector, arg2 string) (stocks.PortfolioState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountPortfolio", arg0, arg1, arg2)
	ret0, _ := ret[0].(stocks.PortfolioState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountPortfolio indicates an expected call of CountPortfolio.
func (mr *MockPortfolioRepositoryMockRecorder) CountPortfolio(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountPortfolio", reflect.TypeOf((*MockPortfolioRepository)(nil).CountPortfolio), arg0, arg1, arg2)
}

// CountTickerAmount mocks base method.
func (m *MockPortfolioRepository) CountTickerAmount(arg0 context.Context, arg1 sql.Selector, arg2 stocks.CountTickerAmountParams) ([]stocks.PortfolioTickerAmount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountTickerAmount", arg0, arg1, arg2)
	ret0, _ := ret[0].([]stocks.PortfolioTickerAmount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountTickerAmount indicates an expected call of CountTickerAmount.
func (mr *MockPortfolioRepositoryMockRecorder) CountTickerAmount(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountTickerAmount", reflect.TypeOf((*MockPortfolioRepository)(nil).CountTickerAmount), arg0, arg1, arg2)
}

// TradeTickers mocks base method.
func (m *MockPortfolioRepository) TradeTickers(arg0 context.Context, arg1 sql.Executor, arg2 stocks.TradeTickerParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TradeTickers", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// TradeTickers indicates an expected call of TradeTickers.
func (mr *MockPortfolioRepositoryMockRecorder) TradeTickers(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TradeTickers", reflect.TypeOf((*MockPortfolioRepository)(nil).TradeTickers), arg0, arg1, arg2)
}

// MockTickerRepository is a mock of TickerRepository interface.
type MockTickerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTickerRepositoryMockRecorder
}

// MockTickerRepositoryMockRecorder is the mock recorder for MockTickerRepository.
type MockTickerRepositoryMockRecorder struct {
	mock *MockTickerRepository
}

// NewMockTickerRepository creates a new mock instance.
func NewMockTickerRepository(ctrl *gomock.Controller) *MockTickerRepository {
	mock := &MockTickerRepository{ctrl: ctrl}
	mock.recorder = &MockTickerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTickerRepository) EXPECT() *MockTickerRepositoryMockRecorder {
	return m.recorder
}

// QueryLatestDaily mocks base method.
func (m *MockTickerRepository) QueryLatestDaily(arg0 context.Context, arg1 sql.Selector, arg2 stocks.QueryDailyFilter) ([]stocks.TickerWithData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryLatestDaily", arg0, arg1, arg2)
	ret0, _ := ret[0].([]stocks.TickerWithData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryLatestDaily indicates an expected call of QueryLatestDaily.
func (mr *MockTickerRepositoryMockRecorder) QueryLatestDaily(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryLatestDaily", reflect.TypeOf((*MockTickerRepository)(nil).QueryLatestDaily), arg0, arg1, arg2)
}

// QueryTickerDailyGraph mocks base method.
func (m *MockTickerRepository) QueryTickerDailyGraph(arg0 context.Context, arg1 sql.Selector, arg2 stocks.QueryDailyGraphParams) ([]stocks.StockDailyData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryTickerDailyGraph", arg0, arg1, arg2)
	ret0, _ := ret[0].([]stocks.StockDailyData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTickerDailyGraph indicates an expected call of QueryTickerDailyGraph.
func (mr *MockTickerRepositoryMockRecorder) QueryTickerDailyGraph(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTickerDailyGraph", reflect.TypeOf((*MockTickerRepository)(nil).QueryTickerDailyGraph), arg0, arg1, arg2)
}

// QueryTickers mocks base method.
func (m *MockTickerRepository) QueryTickers(arg0 context.Context, arg1 sql.Selector, arg2 stocks.QueryTickersFilters) ([]stocks.Ticker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryTickers", arg0, arg1, arg2)
	ret0, _ := ret[0].([]stocks.Ticker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryTickers indicates an expected call of QueryTickers.
func (mr *MockTickerRepositoryMockRecorder) QueryTickers(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryTickers", reflect.TypeOf((*MockTickerRepository)(nil).QueryTickers), arg0, arg1, arg2)
}

// SaveDaily mocks base method.
func (m *MockTickerRepository) SaveDaily(arg0 context.Context, arg1 sql.Executor, arg2 []stocks.SaveDailyParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveDaily", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveDaily indicates an expected call of SaveDaily.
func (mr *MockTickerRepositoryMockRecorder) SaveDaily(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveDaily", reflect.TypeOf((*MockTickerRepository)(nil).SaveDaily), arg0, arg1, arg2)
}

// SaveSplits mocks base method.
func (m *MockTickerRepository) SaveSplits(arg0 context.Context, arg1 sql.Executor, arg2 []stocks.SaveSplitParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSplits", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSplits indicates an expected call of SaveSplits.
func (mr *MockTickerRepositoryMockRecorder) SaveSplits(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSplits", reflect.TypeOf((*MockTickerRepository)(nil).SaveSplits), arg0, arg1, arg2)
}

// SaveTicker mocks base method.
func (m *MockTickerRepository) SaveTicker(arg0 context.Context, arg1 sql.Executor, arg2 []stocks.SaveTickerParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTicker", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTicker indicates an expected call of SaveTicker.
func (mr *MockTickerRepositoryMockRecorder) SaveTicker(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTicker", reflect.TypeOf((*MockTickerRepository)(nil).SaveTicker), arg0, arg1, arg2)
}
